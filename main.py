#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–æ—Ä—Ç—Å–æ–≤
–ü—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫—É 'input_videos' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç
"""

import os
import subprocess
import json
from pathlib import Path
from typing import List, Tuple
import numpy as np

import numpy as np

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π –∏–º–ø–æ—Ä—Ç
from moviepy import VideoFileClip
print("‚úÖ moviepy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç whisper
try:
    import whisper
    print("‚úÖ whisper –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ö†Ô∏è whisper –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—É–±—Ç–∏—Ç—Ä—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    whisper = None

class VideoShortsProcessor:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–∞–ø–∫–∞–º–∏
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞
        self.project_root = Path(__file__).parent
        self.input_folder = self.project_root / "input_videos"
        self.output_folder = self.project_root / "output_shorts"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.min_duration = 60  # 1 –º–∏–Ω—É—Ç–∞
        self.max_duration = 180  # 3 –º–∏–Ω—É—Ç—ã
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.input_folder.mkdir(exist_ok=True)
        self.output_folder.mkdir(exist_ok=True)
        
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ: {self.input_folder}")
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —à–æ—Ä—Ç—Å–æ–≤: {self.output_folder}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        print("ü§ñ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤...")
        try:
            self.whisper_model = whisper.load_model("base")
            print("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
            print("üìù –°—É–±—Ç–∏—Ç—Ä—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            self.whisper_model = None
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ
        self.video_extensions = {'.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v'}
    
    def find_video_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ input_videos"""
        video_files = []
        for file_path in self.input_folder.rglob('*'):
            if file_path.suffix.lower() in self.video_extensions:
                video_files.append(file_path)
        return sorted(video_files)
    
    def detect_scene_changes(self, video_path: Path) -> List[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–º–µ–Ω—Ç—ã —Å–º–µ–Ω—ã —Å—Ü–µ–Ω —Å –ø–æ–º–æ—â—å—é FFmpeg
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-filter:v', 'select="gt(scene,0.3)",showinfo',
            '-f', 'null',
            '-y',
            '-'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            scene_times = []
            
            # –ò—â–µ–º –≤ stderr –≥–¥–µ FFmpeg –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            output_text = result.stderr if result.stderr else result.stdout
            
            for line in output_text.split('\n'):
                if 'pts_time:' in line:
                    try:
                        time_str = line.split('pts_time:')[1].split()[0]
                        scene_times.append(float(time_str))
                    except (IndexError, ValueError):
                        continue
            
            return sorted(scene_times)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω: {e}")
            return []
    
    def detect_silence_pauses(self, video_path: Path, silence_threshold: float = -30) -> List[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—É–∑—ã –≤ –∞—É–¥–∏–æ (—Ç–∏—à–∏–Ω–∞) –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤
        """
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-af', f'silencedetect=noise={silence_threshold}dB:duration=1',
            '-f', 'null',
            '-y',
            '-'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            silence_times = []
            
            # –ò—â–µ–º –≤ stderr –≥–¥–µ FFmpeg –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            output_text = result.stderr if result.stderr else result.stdout
            
            for line in output_text.split('\n'):
                if 'silence_start:' in line:
                    try:
                        time_str = line.split('silence_start:')[1].split()[0]
                        silence_times.append(float(time_str))
                    except (IndexError, ValueError):
                        continue
            
            return sorted(silence_times)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞—É–∑: {e}")
            return []
    
    def get_optimal_cut_points(self, video_path: Path) -> List[Tuple[float, float]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞—Ä–µ–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω –∏ –ø–∞—É–∑
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü) –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        print("  üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ —Ä–∞–∑—Ä–µ–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        try:
            with VideoFileClip(str(video_path)) as clip:
                duration = clip.duration
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
            return []
        
        print(f"  üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ —Å–º–µ–Ω—ã —Å—Ü–µ–Ω –∏ –ø–∞—É–∑
        scene_changes = self.detect_scene_changes(video_path)
        silence_pauses = self.detect_silence_pauses(video_path)
        
        print(f"  üé¨ –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω —Å—Ü–µ–Ω: {len(scene_changes)}")
        print(f"  üîá –ù–∞–π–¥–µ–Ω–æ –ø–∞—É–∑: {len(silence_pauses)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä–µ–∑–∞
        all_cuts = sorted(set(scene_changes + silence_pauses + [0, duration]))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        segments = []
        current_start = 0
        
        for i, cut_point in enumerate(all_cuts[1:], 1):
            segment_duration = cut_point - current_start
            
            # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if segment_duration < self.min_duration:
                continue
            
            # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∏—â–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
            if segment_duration > self.max_duration:
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä–µ–∑–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö max_duration
                target_end = current_start + self.max_duration
                best_cut = current_start + self.max_duration
                
                for potential_cut in all_cuts:
                    if current_start < potential_cut <= target_end:
                        if abs(potential_cut - target_end) < abs(best_cut - target_end):
                            best_cut = potential_cut
                
                segments.append((current_start, best_cut))
                current_start = best_cut
            else:
                segments.append((current_start, cut_point))
                current_start = cut_point
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        if duration - current_start >= self.min_duration:
            segments.append((current_start, duration))
        
        return segments
    
    def extract_segment(self, video_path: Path, start_time: float, end_time: float, output_path: Path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –≤–∏–¥–µ–æ"""
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-ss', str(start_time),
            '-t', str(end_time - start_time),
            '-c', 'copy',
            '-avoid_negative_ts', 'make_zero',
            str(output_path),
            '-y'  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        ]
        
        try:
            subprocess.run(cmd, check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def generate_subtitles(self, video_path: Path) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è Whisper"""
        if not self.whisper_model:
            return ""
        
        try:
            result = self.whisper_model.transcribe(str(video_path))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SRT —Å—É–±—Ç–∏—Ç—Ä—ã
            srt_content = ""
            for i, segment in enumerate(result["segments"], 1):
                start_time = self.seconds_to_srt_time(segment["start"])
                end_time = self.seconds_to_srt_time(segment["end"])
                text = segment["text"].strip()
                
                srt_content += f"{i}\n{start_time} --> {end_time}\n{text}\n\n"
            
            return srt_content
        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return ""
    
    def seconds_to_srt_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ SRT"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        millisecs = int((seconds % 1) * 1000)
        return f"{hours:02d}:{minutes:02d}:{secs:02d},{millisecs:03d}"
    
    def add_subtitles_to_video(self, video_path: Path, srt_content: str, output_path: Path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –≤–∏–¥–µ–æ"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        srt_path = output_path.parent / f"temp_{output_path.stem}.srt"
        
        try:
            with open(srt_path, 'w', encoding='utf-8') as f:
                f.write(srt_content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å–æ–∑–¥–∞–ª—Å—è
            if not srt_path.exists():
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                return False
            
            # –°–ø–æ—Å–æ–± 1: –í—à–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –ø—Ä—è–º–æ –≤ –≤–∏–¥–µ–æ (burned-in)
            video_str = str(video_path)
            output_str = str(output_path)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä subtitles –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
            srt_for_filter = str(srt_path).replace('\\', '/').replace(':', '\\:')
            
            cmd1 = [
                'ffmpeg',
                '-i', video_str,
                '-vf', f'subtitles={srt_for_filter}:force_style=FontName=Arial,FontSize=24,PrimaryColour=&Hffffff',
                '-c:a', 'copy',
                output_str,
                '-y'
            ]
            
            try:
                result = subprocess.run(cmd1, check=True, capture_output=True, text=True)
                print(f"    ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –≤—à–∏—Ç—ã –≤ –≤–∏–¥–µ–æ")
                return True
            except subprocess.CalledProcessError as e:
                print(f"    ‚ö†Ô∏è –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")
                
                # –°–ø–æ—Å–æ–± 2: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ —Å—Ç–∏–ª–µ–π
                cmd2 = [
                    'ffmpeg',
                    '-i', video_str,
                    '-vf', f'subtitles={srt_for_filter}',
                    '-c:a', 'copy',
                    output_str,
                    '-y'
                ]
                
                try:
                    subprocess.run(cmd2, check=True, capture_output=True)
                    print(f"    ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –≤—à–∏—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)")
                    return True
                except subprocess.CalledProcessError as e2:
                    print(f"    ‚ö†Ô∏è –°–ø–æ—Å–æ–± 2 —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ ass —Ñ–∞–π–ª...")
                    
                    # –°–ø–æ—Å–æ–± 3: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ASS –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    ass_path = srt_path.with_suffix('.ass')
                    self.convert_srt_to_ass(srt_path, ass_path)
                    
                    if ass_path.exists():
                        ass_for_filter = str(ass_path).replace('\\', '/').replace(':', '\\:')
                        cmd3 = [
                            'ffmpeg',
                            '-i', video_str,
                            '-vf', f'ass={ass_for_filter}',
                            '-c:a', 'copy',
                            output_str,
                            '-y'
                        ]
                        
                        try:
                            subprocess.run(cmd3, check=True, capture_output=True)
                            print(f"    ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –≤—à–∏—Ç—ã —á–µ—Ä–µ–∑ ASS")
                            ass_path.unlink()  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ASS
                            return True
                        except subprocess.CalledProcessError as e3:
                            print(f"    ‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –≤—à–∏–≤–∞–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                            if ass_path.exists():
                                ass_path.unlink()
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–æ—Å–æ–±: –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º .srt —Ä—è–¥–æ–º
                    print(f"    üìÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º .srt —Ñ–∞–π–ª–æ–º")
                    import shutil
                    shutil.copy2(video_path, output_path)
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .srt —Ñ–∞–π–ª —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–¥–∞–ª —Å –≤–∏–¥–µ–æ
                    final_srt_path = output_path.with_suffix('.srt')
                    if final_srt_path.exists():
                        final_srt_path.unlink()
                    srt_path.rename(final_srt_path)
                    
                    print(f"    üìù –°—É–±—Ç–∏—Ç—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ: {final_srt_path.name}")
                    return True
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –∫–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            try:
                import shutil
                shutil.copy2(video_path, output_path)
                print(f"    üìÑ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                return True
            except Exception as copy_error:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {copy_error}")
                return False
        finally:
            # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for temp_file in [srt_path]:
                if temp_file.exists():
                    try:
                        temp_file.unlink()
                    except:
                        pass
    
    def convert_srt_to_ass(self, srt_path: Path, ass_path: Path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SRT –≤ ASS —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            with open(srt_path, 'r', encoding='utf-8') as f:
                srt_content = f.read()
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SRT –≤ ASS
            ass_content = """[Script Info]
Title: Auto-generated
ScriptType: v4.00+

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,24,&Hffffff,&Hffffff,&H0,&H80000000,0,0,0,0,100,100,0,0,1,2,0,2,30,30,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
            
            # –ü–∞—Ä—Å–∏–º SRT –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ASS
            blocks = srt_content.strip().split('\n\n')
            for block in blocks:
                lines = block.strip().split('\n')
                if len(lines) >= 3:
                    time_line = lines[1]
                    text_lines = lines[2:]
                    
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                    if ' --> ' in time_line:
                        start, end = time_line.split(' --> ')
                        start_ass = self.srt_time_to_ass(start)
                        end_ass = self.srt_time_to_ass(end)
                        text = '\\N'.join(text_lines)
                        
                        ass_content += f"Dialogue: 0,{start_ass},{end_ass},Default,,0,0,0,,{text}\n"
            
            with open(ass_path, 'w', encoding='utf-8') as f:
                f.write(ass_content)
                
        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ ASS: {e}")
    
    def srt_time_to_ass(self, srt_time: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ SRT —Ñ–æ—Ä–º–∞—Ç–∞ –≤ ASS"""
        # SRT: 00:01:23,456 -> ASS: 0:01:23.46
        srt_time = srt_time.strip()
        if ',' in srt_time:
            time_part, ms_part = srt_time.split(',')
            ms_part = ms_part[:2]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Ü–∏—Ñ—Ä—ã –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            return f"{time_part}.{ms_part}"
        return srt_time
    
    def process_video(self, video_path: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ"""
        print(f"\nüé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞: {video_path.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞—Ä–µ–∑–∫–∏
        segments = self.get_optimal_cut_points(video_path)
        
        if not segments:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
            return
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(segments)} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
        video_output_folder = self.output_folder / video_path.stem
        video_output_folder.mkdir(exist_ok=True)
        
        successful_segments = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç
        for i, (start, end) in enumerate(segments, 1):
            duration = end - start
            segment_name = f"{video_path.stem}_part_{i:02d}_({duration:.0f}s).mp4"
            temp_segment_path = video_output_folder / f"temp_{segment_name}"
            final_segment_path = video_output_folder / segment_name
            
            print(f"    üìπ –°–µ–≥–º–µ–Ω—Ç {i}/{len(segments)}: {start:.1f}s - {end:.1f}s ({duration:.1f}s)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            if self.extract_segment(video_path, start, end, temp_segment_path):
                print(f"    ‚úÖ –í–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
                
                if temp_segment_path.exists():
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                    if self.whisper_model:
                        print(f"    ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã...")
                        subtitles = self.generate_subtitles(temp_segment_path)
                        
                        if subtitles:
                            print(f"    üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã...")
                            if self.add_subtitles_to_video(temp_segment_path, subtitles, final_segment_path):
                                successful_segments += 1
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            if temp_segment_path.exists():
                                temp_segment_path.unlink()
                        else:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                            temp_segment_path.rename(final_segment_path)
                            print(f"    ‚úÖ {segment_name} –≥–æ—Ç–æ–≤ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                            successful_segments += 1
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                        temp_segment_path.rename(final_segment_path)
                        print(f"    ‚úÖ {segment_name} –≥–æ—Ç–æ–≤")
                        successful_segments += 1
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç {i}")
        
        print(f"  üéØ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {successful_segments}/{len(segments)}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∏–¥–µ–æ –¥–ª—è —à–æ—Ä—Ç—Å–æ–≤")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg
        try:
            subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
            print("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH")
            print("   –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://ffmpeg.org/download.html")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤
        video_files = self.find_video_files()
        
        if not video_files:
            print(f"üìÇ –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.input_folder}")
            print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É 'input_videos' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            instruction_file = self.input_folder / "–ü–û–ú–ï–°–¢–ò–¢–ï_–°–Æ–î–ê_–í–ò–î–ï–û.txt"
            with open(instruction_file, 'w', encoding='utf-8') as f:
                f.write("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ —ç—Ç—É –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ.\n\n")
                f.write("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n")
                f.write("- MP4, AVI, MKV, MOV\n")
                f.write("- WMV, FLV, WebM, M4V\n\n")
                f.write("–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã–µ —à–æ—Ä—Ç—Å—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'output_shorts'")
            
            return
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤: {len(video_files)}")
        for video in video_files:
            print(f"  üìÑ {video.name}")
        
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   üïê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞: {self.min_duration} —Å–µ–∫")
        print(f"   üïò –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞: {self.max_duration} —Å–µ–∫")
        print(f"   üìù –°—É–±—Ç–∏—Ç—Ä—ã: {'–≤–∫–ª—é—á–µ–Ω—ã' if self.whisper_model else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
        total_processed = 0
        for video_path in video_files:
            try:
                self.process_video(video_path)
                total_processed += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_path.name}: {e}")
                continue
        
        print("\n" + "=" * 60)
        print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {total_processed}/{len(video_files)}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_folder}")
        print("\nüí° –ì–æ—Ç–æ–≤—ã–µ —à–æ—Ä—Ç—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∞–ø–∫–µ 'output_shorts'")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    processor = VideoShortsProcessor()
    processor.run()


if __name__ == "__main__":
    main()