#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–æ—Ä—Ç—Å–æ–≤
–ü—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫—É 'input_videos' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç
"""

import os
import subprocess
import json
from pathlib import Path
from typing import List, Tuple
import numpy as np

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π –∏–º–ø–æ—Ä—Ç
from moviepy import VideoFileClip
print("‚úÖ moviepy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç whisper
try:
    import whisper
    print("‚úÖ whisper –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ö†Ô∏è whisper –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—É–±—Ç–∏—Ç—Ä—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    whisper = None

class VideoShortsProcessor:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–∞–ø–∫–∞–º–∏
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞
        self.project_root = Path(__file__).parent
        self.input_folder = self.project_root / "input_videos"
        self.output_folder = self.project_root / "output_shorts"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.min_duration = 60  # 1 –º–∏–Ω—É—Ç–∞
        self.max_duration = 180  # 3 –º–∏–Ω—É—Ç—ã
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.input_folder.mkdir(exist_ok=True)
        self.output_folder.mkdir(exist_ok=True)
        
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ: {self.input_folder}")
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —à–æ—Ä—Ç—Å–æ–≤: {self.output_folder}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        print("ü§ñ –ú–æ–¥–µ–ª—å Whisper –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        self.whisper_model = None  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
        # try:
        #     self.whisper_model = whisper.load_model("base")
        #     print("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        # except Exception as e:
        #     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
        #     print("üìù –°—É–±—Ç–∏—Ç—Ä—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        #     self.whisper_model = None
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ
        self.video_extensions = {'.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v'}
    
    def find_video_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ input_videos"""
        video_files = []
        for file_path in self.input_folder.rglob('*'):
            if file_path.suffix.lower() in self.video_extensions:
                video_files.append(file_path)
        return sorted(video_files)
    
    def detect_scene_changes(self, video_path: Path) -> List[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–º–µ–Ω—Ç—ã —Å–º–µ–Ω—ã —Å—Ü–µ–Ω —Å –ø–æ–º–æ—â—å—é FFmpeg
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-filter:v', 'select="gt(scene,0.3)",showinfo',
            '-f', 'null',
            '-y',
            '-'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            scene_times = []
            
            # –ò—â–µ–º –≤ stderr –≥–¥–µ FFmpeg –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            output_text = result.stderr if result.stderr else result.stdout
            
            for line in output_text.split('\n'):
                if 'pts_time:' in line:
                    try:
                        time_str = line.split('pts_time:')[1].split()[0]
                        scene_times.append(float(time_str))
                    except (IndexError, ValueError):
                        continue
            
            return sorted(scene_times)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω: {e}")
            return []
    
    def detect_silence_pauses(self, video_path: Path, silence_threshold: float = -30) -> List[float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—É–∑—ã –≤ –∞—É–¥–∏–æ (—Ç–∏—à–∏–Ω–∞) –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤
        """
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-af', f'silencedetect=noise={silence_threshold}dB:duration=1',
            '-f', 'null',
            '-y',
            '-'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            silence_times = []
            
            # –ò—â–µ–º –≤ stderr –≥–¥–µ FFmpeg –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            output_text = result.stderr if result.stderr else result.stdout
            
            for line in output_text.split('\n'):
                if 'silence_start:' in line:
                    try:
                        time_str = line.split('silence_start:')[1].split()[0]
                        silence_times.append(float(time_str))
                    except (IndexError, ValueError):
                        continue
            
            return sorted(silence_times)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞—É–∑: {e}")
            return []
    
    def get_optimal_cut_points(self, video_path: Path) -> List[Tuple[float, float]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞—Ä–µ–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω –∏ –ø–∞—É–∑
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü) –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        print("  üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ —Ä–∞–∑—Ä–µ–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        try:
            with VideoFileClip(str(video_path)) as clip:
                duration = clip.duration
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
            return []
        
        print(f"  üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ —Å–º–µ–Ω—ã —Å—Ü–µ–Ω –∏ –ø–∞—É–∑
        scene_changes = self.detect_scene_changes(video_path)
        silence_pauses = self.detect_silence_pauses(video_path)
        
        print(f"  üé¨ –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω —Å—Ü–µ–Ω: {len(scene_changes)}")
        print(f"  üîá –ù–∞–π–¥–µ–Ω–æ –ø–∞—É–∑: {len(silence_pauses)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä–µ–∑–∞
        all_cuts = sorted(set(scene_changes + silence_pauses + [0, duration]))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        segments = []
        current_start = 0
        
        for i, cut_point in enumerate(all_cuts[1:], 1):
            segment_duration = cut_point - current_start
            
            # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if segment_duration < self.min_duration:
                continue
            
            # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∏—â–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
            if segment_duration > self.max_duration:
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä–µ–∑–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö max_duration
                target_end = current_start + self.max_duration
                best_cut = current_start + self.max_duration
                
                for potential_cut in all_cuts:
                    if current_start < potential_cut <= target_end:
                        if abs(potential_cut - target_end) < abs(best_cut - target_end):
                            best_cut = potential_cut
                
                segments.append((current_start, best_cut))
                current_start = best_cut
            else:
                segments.append((current_start, cut_point))
                current_start = cut_point
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        if duration - current_start >= self.min_duration:
            segments.append((current_start, duration))
        
        return segments
    
    def extract_segment(self, video_path: Path, start_time: float, end_time: float, output_path: Path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –≤–∏–¥–µ–æ"""
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-ss', str(start_time),
            '-t', str(end_time - start_time),
            '-c', 'copy',
            '-avoid_negative_ts', 'make_zero',
            str(output_path),
            '-y'  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        ]
        
        try:
            subprocess.run(cmd, check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def generate_subtitles(self, video_path: Path) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è Whisper"""
        if not self.whisper_model:
            return ""
        
        try:
            result = self.whisper_model.transcribe(str(video_path))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SRT —Å—É–±—Ç–∏—Ç—Ä—ã
            srt_content = ""
            for i, segment in enumerate(result["segments"], 1):
                start_time = self.seconds_to_srt_time(segment["start"])
                end_time = self.seconds_to_srt_time(segment["end"])
                text = segment["text"].strip()
                
                srt_content += f"{i}\n{start_time} --> {end_time}\n{text}\n\n"
            
            return srt_content
        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return ""
    
    def seconds_to_srt_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ SRT"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        millisecs = int((seconds % 1) * 1000)
        return f"{hours:02d}:{minutes:02d}:{secs:02d},{millisecs:03d}"
    
    def convert_to_mobile_format(self, input_path: Path, output_path: Path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 9:16 —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            with VideoFileClip(str(input_path)) as clip:
                original_width = clip.w
                original_height = clip.h
                original_ratio = original_width / original_height
            
            print(f"    üì± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...")
            print(f"    üìè –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {original_width}x{original_height} ({original_ratio:.2f}:1)")
            
            # –¶–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ (9:16)
            target_width = 1080
            target_height = 1920
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø: –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É + —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
            # 1. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ —á—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            main_scale_width = int(target_width * 1.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20% = 1296px –≤–º–µ—Å—Ç–æ 1080px
            main_scale_height = int(original_height * (main_scale_width / original_width))
            
            # 2. –ü–æ–∑–∏—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
            main_x = (target_width - main_scale_width) // 2  # –ë—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            main_y = (target_height - main_scale_height) // 2
            
            # 3. –î–ª—è —Ñ–æ–Ω–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏ —Ä–∞–∑–º—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ–æ–Ω —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏–ª –≤—Å—é –≤—ã—Å–æ—Ç—É (–±—É–¥–µ—Ç —à–∏—Ä–µ —á–µ–º –Ω—É–∂–Ω–æ, –Ω–æ –Ω–∞–º —Ç–∞–∫ –∏ –Ω–∞–¥–æ)
            bg_scale_height = target_height
            bg_scale_width = int(original_width * (target_height / original_height))
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            bg_x = (target_width - bg_scale_width) // 2
            
            print(f"    üéØ –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ: {main_scale_width}x{main_scale_height} –≤ –ø–æ–∑–∏—Ü–∏–∏ ({main_x}, {main_y})")
            print(f"    üå´Ô∏è –†–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω: {bg_scale_width}x{bg_scale_height} –≤ –ø–æ–∑–∏—Ü–∏–∏ ({bg_x}, 0)")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:
            # [0:v] - –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
            # –î–µ–ª–∞–µ–º —Ñ–æ–Ω: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞ –≤—Å—é –≤—ã—Å–æ—Ç—É, —Ä–∞–∑–º—ã–≤–∞–µ–º, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            # –î–µ–ª–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —á–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏, –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
            filter_str = (
                f"[0:v]scale={bg_scale_width}:{bg_scale_height},boxblur=15:3,crop={target_width}:{target_height}:{abs(bg_x) if bg_x < 0 else 0}:0[bg];"
                f"[0:v]scale={main_scale_width}:{main_scale_height}[main];"
                f"[bg][main]overlay={main_x}:{main_y}"
            )
            
            print(f"    üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            cmd = [
                'ffmpeg',
                '-i', str(input_path.absolute()),
                '-filter_complex', filter_str,
                '-c:a', 'copy',
                '-y',
                str(output_path.absolute())
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"    ‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º!")
                return True
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:")
                if result.stderr:
                    error_lines = result.stderr.strip().split('\n')[-2:]
                    for line in error_lines:
                        if line.strip():
                            print(f"    ‚ö†Ô∏è {line}")
                return False
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")
            return False

    def add_subtitles_with_drawtext(self, video_path: Path, srt_content: str, output_path: Path):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º drawtext –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        try:
            # –ü–∞—Ä—Å–∏–º SRT –∫–æ–Ω—Ç–µ–Ω—Ç
            subtitle_entries = self.parse_srt_content(srt_content)
            
            if not subtitle_entries:
                print("    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è drawtext")
                return False
            
            print(f"    üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º drawtext –¥–ª—è {len(subtitle_entries)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä drawtext –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
            drawtext_filters = []
            for entry in subtitle_entries:
                start_sec = entry['start']
                end_sec = entry['end'] 
                text = entry['text'].replace("'", "\\'").replace(":", "\\:")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†
                filter_str = f"drawtext=fontfile=C\\\\:/Windows/Fonts/arial.ttf:text='{text}':fontcolor=white:fontsize=28:box=1:boxcolor=black@0.7:boxborderw=6:x=(w-text_w)/2:y=h-th-30:enable='between(t,{start_sec},{end_sec})'"
                drawtext_filters.append(filter_str)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            combined_filter = ','.join(drawtext_filters)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            video_path_str = str(video_path.absolute())
            output_path_str = str(output_path.absolute())
            
            cmd = [
                'ffmpeg',
                '-i', video_path_str,
                '-vf', combined_filter,
                '-c:a', 'copy',
                '-y',
                output_path_str
            ]
            
            print(f"    üîß –°–ø–æ—Å–æ–± 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º drawtext...")
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"    ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ drawtext!")
                return True
            else:
                print(f"    ‚ùå Drawtext —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                return False
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ drawtext –º–µ—Ç–æ–¥–µ: {e}")
            return False
    
    def parse_srt_content(self, srt_content: str) -> List[dict]:
        """–ü–∞—Ä—Å–∏—Ç SRT –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        entries = []
        blocks = srt_content.strip().split('\n\n')
        
        for block in blocks:
            lines = block.strip().split('\n')
            if len(lines) >= 3:
                try:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 00:00:01,500 --> 00:00:05,000)
                    time_line = lines[1]
                    if ' --> ' in time_line:
                        start_str, end_str = time_line.split(' --> ')
                        start_sec = self.srt_time_to_seconds(start_str.strip())
                        end_sec = self.srt_time_to_seconds(end_str.strip())
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                        text = ' '.join(lines[2:])
                        
                        entries.append({
                            'start': start_sec,
                            'end': end_sec,
                            'text': text
                        })
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–∞: {e}")
                    continue
        
        return entries
    
    def srt_time_to_seconds(self, time_str: str) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è SRT (00:00:01,500) –≤ —Å–µ–∫—É–Ω–¥—ã"""
        try:
            # –§–æ—Ä–º–∞—Ç: HH:MM:SS,mmm
            time_part, ms_part = time_str.split(',')
            hours, minutes, seconds = map(int, time_part.split(':'))
            milliseconds = int(ms_part)
            
            total_seconds = hours * 3600 + minutes * 60 + seconds + milliseconds / 1000.0
            return total_seconds
        except Exception:
            return 0.0

    def add_subtitles_to_video(self, video_path: Path, srt_content: str, output_path: Path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –≤–∏–¥–µ–æ - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–Ø–ú–´–ú –ü–£–¢–ï–ú –ö –®–†–ò–§–¢–£"""
        if not srt_content.strip():
            print("    ‚ö†Ô∏è –ü—É—Å—Ç—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –Ω–∏—Ö")
            import shutil
            shutil.copy2(video_path, output_path)
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        srt_path = output_path.parent / f"temp_{output_path.stem}.srt"
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SRT —Ñ–∞–π–ª
            with open(srt_path, 'w', encoding='utf-8') as f:
                f.write(srt_content)
            
            print(f"    üìù –í—Ä–µ–º–µ–Ω–Ω—ã–π SRT —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {srt_path.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if not srt_path.exists():
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
            video_path_str = str(video_path.absolute())
            output_path_str = str(output_path.absolute())
            srt_path_str = str(srt_path.absolute()).replace('\\', '/')
            
            # –°–ü–û–°–û–ë 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º subtitles —Ñ–∏–ª—å—Ç—Ä —Å –ø—Ä—è–º—ã–º –ø—É—Ç–µ–º –∫ —à—Ä–∏—Ñ—Ç—É
            cmd1 = [
                'ffmpeg',
                '-i', video_path_str,
                '-vf', f"subtitles={srt_path_str}:fontfile=C\\:/Windows/Fonts/arial.ttf:fontsize=24:fontcolor=white:outline=1:outlinecolor=black",
                '-c:a', 'copy',
                '-y',
                output_path_str
            ]
            
            print(f"    üîß –°–ø–æ—Å–æ–± 1: –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –ø—Ä—è–º—ã–º –ø—É—Ç–µ–º –∫ —à—Ä–∏—Ñ—Ç—É...")
            print(f"    üìÑ –ö–æ–º–∞–Ω–¥–∞: ffmpeg -i {video_path.name} [subtitles+font] {output_path.name}")
            
            result1 = subprocess.run(cmd1, capture_output=True, text=True)
            
            if result1.returncode == 0:
                print(f"    ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω—ã!")
                return True
            else:
                print(f"    ‚ö†Ô∏è –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º drawtext...")
                
                # –°–ü–û–°–û–ë 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º drawtext - –ø–∞—Ä—Å–∏–º SRT –∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                if self.add_subtitles_with_drawtext(video_path, srt_content, output_path):
                    return True
                
                # –°–ü–û–°–û–ë 3: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –±–µ–∑ —à—Ä–∏—Ñ—Ç–∞
                cmd3 = [
                    'ffmpeg',
                    '-i', video_path_str,
                    '-vf', f"subtitles={srt_path_str}",
                    '-c:a', 'copy',
                    '-y',
                    output_path_str
                ]
                
                print(f"    üîß –°–ø–æ—Å–æ–± 3: –ü—Ä–æ—Å—Ç—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –±–µ–∑ —à—Ä–∏—Ñ—Ç–∞...")
                result3 = subprocess.run(cmd3, capture_output=True, text=True)
                
                if result3.returncode == 0:
                    print(f"    ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)")
                    return True
                else:
                    print(f"    ‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                    import shutil
                    shutil.copy2(video_path, output_path)
                    return True
                
        except Exception as e:
            print(f"    ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            try:
                import shutil
                shutil.copy2(video_path, output_path)
                print(f"    üìÑ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                return True
            except Exception as copy_error:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {copy_error}")
                return False
        finally:
            # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SRT —Ñ–∞–π–ª
            if srt_path.exists():
                try:
                    srt_path.unlink()
                except:
                    pass
    
    def process_video(self, video_path: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ"""
        print(f"\nüé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞: {video_path.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞—Ä–µ–∑–∫–∏
        segments = self.get_optimal_cut_points(video_path)
        
        if not segments:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
            return
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(segments)} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
        video_output_folder = self.output_folder / video_path.stem
        video_output_folder.mkdir(exist_ok=True)
        
        successful_segments = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç
        for i, (start, end) in enumerate(segments, 1):
            duration = end - start
            segment_name = f"{video_path.stem}_part_{i:02d}_({duration:.0f}s).mp4"
            temp_segment_path = video_output_folder / f"temp_{segment_name}"
            final_segment_path = video_output_folder / segment_name
            
            print(f"    üìπ –°–µ–≥–º–µ–Ω—Ç {i}/{len(segments)}: {start:.1f}s - {end:.1f}s ({duration:.1f}s)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            if self.extract_segment(video_path, start, end, temp_segment_path):
                print(f"    ‚úÖ –í–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω")
                
                if temp_segment_path.exists():
                    # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´ –°–£–ë–¢–ò–¢–†–´ - —Ç–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                    print(f"    üì± –°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
                    
                    if self.convert_to_mobile_format(temp_segment_path, final_segment_path):
                        print(f"    ‚úÖ {segment_name} –≥–æ—Ç–æ–≤ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)!")
                        successful_segments += 1
                    else:
                        # –ï—Å–ª–∏ –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é
                        temp_segment_path.rename(final_segment_path)
                        print(f"    ‚úÖ {segment_name} –≥–æ—Ç–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
                        successful_segments += 1
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    if temp_segment_path.exists():
                        temp_segment_path.unlink()
                else:
                    print(f"    ‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç {i}")
        
        print(f"  üéØ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {successful_segments}/{len(segments)}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∏–¥–µ–æ –¥–ª—è —à–æ—Ä—Ç—Å–æ–≤")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg
        try:
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, text=True)
            print("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            version_line = result.stdout.split('\n')[0] if result.stdout else "–≤–µ—Ä—Å–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            print(f"   üìã {version_line}")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH")
            print("   üí° –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è FFmpeg")
            print("   üîó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://ffmpeg.org/download.html")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤
        video_files = self.find_video_files()
        
        if not video_files:
            print(f"üìÇ –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.input_folder}")
            print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É 'input_videos' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            instruction_file = self.input_folder / "–ü–û–ú–ï–°–¢–ò–¢–ï_–°–Æ–î–ê_–í–ò–î–ï–û.txt"
            with open(instruction_file, 'w', encoding='utf-8') as f:
                f.write("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ —ç—Ç—É –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ.\n\n")
                f.write("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n")
                f.write("- MP4, AVI, MKV, MOV\n")
                f.write("- WMV, FLV, WebM, M4V\n\n")
                f.write("–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã–µ —à–æ—Ä—Ç—Å—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'output_shorts'")
            
            return
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤: {len(video_files)}")
        for video in video_files:
            print(f"  üìÑ {video.name}")
        
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   üïê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞: {self.min_duration} —Å–µ–∫")
        print(f"   üïò –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞: {self.max_duration} —Å–µ–∫")
        print(f"   üìù –°—É–±—Ç–∏—Ç—Ä—ã: {'‚úÖ –≤–∫–ª—é—á–µ–Ω—ã (Whisper)' if self.whisper_model else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
        total_processed = 0
        for video_path in video_files:
            try:
                self.process_video(video_path)
                total_processed += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_path.name}: {e}")
                continue
        
        print("\n" + "=" * 60)
        print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {total_processed}/{len(video_files)}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_folder}")
        print("\nüí° –ì–æ—Ç–æ–≤—ã–µ —à–æ—Ä—Ç—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∞–ø–∫–µ 'output_shorts'")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    processor = VideoShortsProcessor()
    processor.run()


if __name__ == "__main__":
    main()